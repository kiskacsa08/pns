using System;
using System.Collections.Generic;
using System.Text;
using System.Drawing;
using System.ComponentModel;

namespace PNSDraw
{
    public class OperatingUnit : Canvas.IGraphicsObject, Canvas.IConnectableObject
    {
        #region Core private data variables
        
        int ID;
        Point coords;
        Point offset;

        Color color;
        bool locked = false;
        bool Selected = false;

        string name;
        string title;

        List<Canvas.IConnectableObject> connectedobjects;
        Canvas.IGraphicsStructure Container;

        TextObject Label;

        bool Highlighted;

        #endregion;


        #region Private data properties
        [Browsable(false)]
        Color Color
        {
            get { return color; }
            set { color = value; }
        }

        [Browsable(false)]
        Point Coords
        {
            get { return coords; }
            set { coords = value; }
        }

        [Browsable(false)]
        bool Locked
        {
            get { return locked; }
            set { locked = value; }
        }

        [Browsable(false)]
        public string Name
        {
            get { return name; }
            set
            {
                string validated = Container.ValidateName(this, value);
                name = validated;
                if (Title == "")
                {
                    Label.Text = name;
                }
            }
        }

        [Browsable(false)]
        public string Title
        {
            get { return title; }
            set
            {
                title = value;
                if (title == "")
                {
                    Label.Text = Name;
                }
                else
                {
                    Label.Text = title;
                }
            }
        }

        [Browsable(false)]
        Point LabelOffset
        {
            get
            {
                return Label.OffsetProp;
            }
            set
            {
                Label.OffsetProp = value;
            }
        }

        [Browsable(false)]
        public Color LabelColor
        {
            get
            {
                return Label.ColorProp;
            }
            set
            {
                Label.ColorProp = value;
            }
        }

        [Browsable(false)]
        public int LabelFontSize
        {
            get
            {
                return Label.FontSize;
            }
            set
            {
                Label.FontSize = value;
            }
        }

        #endregion


        public OperatingUnit(Canvas.IGraphicsStructure container)
        {
            ID = 0;
            Coords = new Point(0, 0);
            offset = new Point(0, 0);
            Color = Color.Black;
            connectedobjects = new List<Canvas.IConnectableObject>();
            Container = container;
            Label = new TextObject(container, this);
            Label.Text = "OperatingUnit";
            Label.SetCoords(new Point(Globals.OperatingUnitWidth/2 +3 , -Globals.OperatingUnitHeight/2));
            Highlighted = false;
            Name = Container.GenerateName(this);
            Title = "";
        }


        #region GraphicsObject interface functions

        public int GetID()
        {
            return ID;
        }

        public void Draw(Graphics g, bool plain)
        {
            if (plain == true)
            {
                DrawOperatingUnit(g, Color, Coords, Color, false);
                return;
            }
            if (Selected)
            {
                DrawOperatingUnit(g, Color, Coords, Color.Red, true);    
            }
            else if (Highlighted)
            {
                DrawOperatingUnit(g, Color, Coords, Color.Gray, true);
            }
            else
            {
                DrawOperatingUnit(g, Color, Coords, Color, false);
            }
        }

        public bool HitTest(Point mousecoords)
        {
            double dx = (double) Coords.X - mousecoords.X;
            double dy = (double) Coords.Y - mousecoords.Y;
            if ((Math.Abs(dx) < (Globals.OperatingUnitWidth / 2)) && (Math.Abs(dy) < (Globals.OperatingUnitHeight / 2)))
            {
                return true;
            }
            return false;
        }

        public Point GetCoords()
        {
            return Coords;
        }

        public void SetCoords(Point newcoords)
        {
            Coords = newcoords;
        }

        public void SetID(int newid)
        {
            ID = newid;
            if (Name == "")
            {
                NameProp = Container.GenerateName(this);
            }
        }

        public void SetSelected(bool selected)
        {
            Selected = selected;
        }

        public bool IsSelected()
        {
            return Selected;
        }

        public void SetOffset(Point newoffset)
        {
            offset = newoffset;
        }

        public void IntegrateOffset()
        {
            Coords += (Size)offset;
            offset.X = 0;
            offset.Y = 0;
        }

        public bool IntersectsWith(Rectangle rect)
        {
            rect.Inflate(Globals.OperatingUnitWidth / 2, Globals.OperatingUnitHeight / 2);
            return rect.Contains(Coords);
        }

        public int GetLayer()
        {
            return 2;
        }

        public Point GetCurrentCoords()
        {
            Point cur = (Point)((Size)Coords + (Size)offset);
            return cur;
        }

        public Point GetOffset()
        {
            return offset;
        }

        public void DrawGhost(Graphics g)
        {
            Color color = Color.Silver;
            if (offset.IsEmpty == false)
            {
                DrawOperatingUnit(g, color, GetCurrentCoords(), color, false);
            }
        }

        public void SetEditSelected(bool selected)
        {

        }

        public bool IsPartialObject()
        {
            return false;
        }

        public Canvas.IGraphicsObject GetParentObject()
        {
            return this;
        }

        public void SetHighlighted(bool highlighted)
        {
            Highlighted = highlighted;
        }

        public bool IsHighlighted()
        {
            return Highlighted;
        }


        public bool IsLocked()
        {
            return Locked;
        }



        public Rectangle GetBoundary()
        {
            Size halfopsize = new Size(Globals.OperatingUnitWidth / 2, Globals.OperatingUnitHeight / 2);
            return new Rectangle(Coords - halfopsize, new Size(Globals.OperatingUnitWidth, Globals.OperatingUnitHeight));
        }


        public void SetSelectedChild(Canvas.IGraphicsObject child)
        {
            Selected = false;
        }


        public bool IsMoveable()
        {
            return true;
        }

        public bool IsDeletable()
        {
            return true;
        }

        #endregion

        #region ConnectableObject interface functions

        public Point GetConnectorBeginCoords()
        {
            Point conn = GetCoords();
            // conn.Y += Globals.OperatingUnitHeight / 2 - 2;
            return conn;
        }

        public Point GetConnectorEndCoords()
        {
            Point conn = GetCoords();
            // conn.Y -= Globals.OperatingUnitHeight / 2 - 2;
            return conn;
        }

        public Point GetCurrentConnectorBeginCoords()
        {
            Point conn = GetCurrentCoords();
            // conn.Y += Globals.OperatingUnitHeight / 2 - 2;
            return conn;
        }

        public Point GetCurrentConnectorEndCoords()
        {
            Point conn = GetCurrentCoords();
            // conn.Y -= Globals.OperatingUnitHeight / 2 - 2;
            return conn;
        }



        public bool IsValidConnectorBegin(Canvas.IConnectableObject end)
        {
            if (end == null)
            {
                return true;
            }
            else if (end is Material)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool IsValidConnectorEnd(Canvas.IConnectableObject begin)
        {
            if (connectedobjects.Contains(begin))
            {
                return false;
            }
            if (begin == null)
            {
                return true;
            }
            else if (begin is Material)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void AddConnection(Canvas.IConnectableObject begin)
        {
            if (connectedobjects.Contains(begin) == false)
            {
                connectedobjects.Add(begin);
            }
        }

        public void RemoveConnection(Canvas.IConnectableObject begin)
        {
            if (connectedobjects.Contains(begin) == true)
            {
                connectedobjects.Remove(begin);
            }
        }

        #endregion

        #region Other functions

        public void OnAddToGraph()
        {
            Container.AddSingleGraphicsObject(this);
            Container.AddSingleGraphicsObject(this.Label);
        }

        public void OnRemoveFromGraph()
        {
            Container.RemoveSingleGraphicsObject(this);
            Container.RemoveSingleGraphicsObject(this.Label);
        }

        public string CovertToSVG(int zorder)
        {
            string svg = "";

            Point tmp = new Point(Coords.X - Globals.OperatingUnitWidth / 2,
                Coords.Y - Globals.OperatingUnitHeight / 2);
            Rectangle rect = new Rectangle(tmp, new Size(Globals.OperatingUnitWidth, Globals.OperatingUnitHeight));

            svg = String.Format("<rect x=\"{0}\" y=\"{1}\" width=\"{2}\" height=\"{3}\" style=\"fill: {4};\" />\n",
                ConvertManager.ToString(rect.X / 5),
                ConvertManager.ToString(rect.Y / 5),
                ConvertManager.ToString(rect.Width / 5),
                ConvertManager.ToString(rect.Height / 5),
                ConvertManager.ToHtml(Color));

            svg += Label.CovertToSVG(zorder);

            return svg;
        }

        public void DrawOperatingUnit(Graphics g, Color c, Point mcoords, Color line, bool drawstroke)
        {
            SolidBrush brush = new SolidBrush(c);
            Pen p = new Pen(new SolidBrush(line), Globals.LineSize);

            Point tmp = new Point(mcoords.X - Globals.OperatingUnitWidth / 2,
                mcoords.Y - Globals.OperatingUnitHeight / 2);
            Rectangle rect = new Rectangle(tmp, new Size(Globals.OperatingUnitWidth, Globals.OperatingUnitHeight));

            g.FillRectangle(brush, rect);
            if (drawstroke)
            {
                rect.X -= 20;
                rect.Y -= 20;
                rect.Width += 40;
                rect.Height += 40;
                g.DrawRectangle(p, rect);
            }
        }

        #endregion

        #region PropertyGrid properties
        
        [Browsable(true)]
        [DisplayName("Type")]
        [ReadOnly(true)]
        public string TypeProp
        {
            get
            {
                return "Operating Unit";
            }
        }

        [Browsable(true)]
        [Category("Label")]
        [DisplayName("Text")]
        public string LabelTextProp
        {
            get
            {
                return Title;
            }
            set
            {
                Title = value;
            }
        }

        [Browsable(true)]
        [DisplayName("Name")]
        public string NameProp
        {
            get
            {
                return Name;
            }
            set
            {
                Name = value;
            }
        }

        [Browsable(true)]
        [Category("Label")]
        [DisplayName("Color")]
        public Color LabelColorProp
        {
            get
            {
                return LabelColor;
            }
            set
            {
                LabelColor = value;
            }
        }

        [Browsable(true)]
        [Category("Label")]
        [DisplayName("Font Size")]
        public string FontSizeProp
        {
            get
            {
                int size = Label.FontSize;
                if (size <= 0)
                {
                    return Globals.DefaultFontSize.ToString() + " (default)";
                }
                else
                {
                    return size.ToString();
                }
            }
            set
            {
                int newsize = ConvertManager.ToInt(value);
                if (value != newsize.ToString())
                {
                    Label.FontSize = -1;
                }
                else
                {
                    Label.FontSize = newsize;
                }
            }
        }

        [Browsable(true)]
        [Category("Label")]
        [DisplayName("Offset")]
        public Point LabelOffsetProp
        {
            get
            {
                return LabelOffset;
            }
            set
            {
                LabelOffset = value;
            }
        }

        [Browsable(true)]
        [DisplayName("Coords")]
        public Point CoordsProp
        {
            get
            {
                return Coords;
            }
            set
            {
                Coords = value;
            }
        }

        [Browsable(true)]
        [DisplayName("Color")]
        public Color ColorProp
        {
            get
            {
                return Color;
            }
            set
            {
                Color = value;
            }
        }

        #endregion

        
    }
}
