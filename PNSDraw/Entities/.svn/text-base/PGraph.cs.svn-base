using System;
using System.Collections.Generic;
using System.Text;
using System.Xml;
using System.Xml.Serialization;
using System.IO;

namespace PNSDraw
{
    class PGraph : Canvas.IGraphicsStructure
    {

        List<Material> Materials;
        List<OperatingUnit> OperatingUnits;
        List<Edge> Edges;

        List<Canvas.IGraphicsObject> GraphicsObjectList;

        int UniqueID = 0;

        string UndoXML = "";
        string CurrentXML = "";
        string RedoXML = "";

        public int GetFreeUniqueID()
        {
            return ++UniqueID;
        }

        public void CreateUndo()
        {
            UndoXML = CurrentXML;
            CurrentXML = ExportToXML();
            RedoXML = "";
        }

        public bool DoUndo()
        {
            if (UndoXML != "")
            {
                RedoXML = ExportToXML();
                ImportFromXML(UndoXML);
                CurrentXML = UndoXML;
                UndoXML = "";
                return true;
            }
            else 
            {
                return false;
            }
        }

        public bool DoRedo()
        {
            if (RedoXML != "")
            {
                UndoXML = ExportToXML();
                ImportFromXML(RedoXML);
                CurrentXML = RedoXML;
                RedoXML = "";
                return true;
            }
            else
            {
                return false;
            }
        }

        public PGraph()
        {
            GraphicsObjectList = new List<Canvas.IGraphicsObject>();
            Materials = new List<Material>();
            OperatingUnits = new List<OperatingUnit>();
            Edges = new List<Edge>();
            UniqueID = 0;
        }

        public void AddSingleObject(Canvas.IGraphicsObject obj)
        {
            if (obj.GetID() == 0)
            {
                obj.SetID(GetFreeUniqueID());
            }
            if (obj is Material)
            {
                Material m = obj as Material;
                AddMaterial(m);
            }
            else if (obj is OperatingUnit)
            {
                OperatingUnit ou = obj as OperatingUnit;
                AddOperatingUnit(ou);
            }
            else if (obj is Edge)
            {
                Edge e = obj as Edge;
                AddEdge(e);
            }

        }

        public void RemoveSingleObject(Canvas.IGraphicsObject obj)
        {
            if (obj is Material)
            {
                Material m = obj as Material;
                RemoveMaterial(m);
            }
            else if (obj is OperatingUnit)
            {
                OperatingUnit ou = obj as OperatingUnit;
                RemoveOperatingUnit(ou);
            }
            else if (obj is Edge)
            {
                Edge e = obj as Edge;
                RemoveEdge(e);
            }
            else if (obj is EdgeNode)
            {
                EdgeNode en = obj as EdgeNode;
                RemoveEdgeNode(en);
            }

        }

        public void AddSingleGraphicsObject(Canvas.IGraphicsObject obj)
        {
            if (GraphicsObjectList.Contains(obj) == false)
            {
                if (obj.GetID() == 0) obj.SetID(GetFreeUniqueID());
                GraphicsObjectList.Add(obj);
            }
        }

        public void RemoveSingleGraphicsObject(Canvas.IGraphicsObject obj)
        {
            if (GraphicsObjectList.Contains(obj))
            {
                GraphicsObjectList.Remove(obj);
            }
        }

        public void RemoveObjects(List<Canvas.IGraphicsObject> toremove)
        {
            foreach (Canvas.IGraphicsObject obj in toremove)
            {
                List<Edge> connected = GetConnectedEdges(obj);
                RemoveSingleObject(obj);
                foreach (Edge ed in connected)
                {
                    RemoveSingleObject(ed);
                }
            }
        }

        public void Reset()
        {
            Clear();
            UndoXML = "";
            RedoXML = "";
            CurrentXML = "";
            Globals.ResetDefaults();
        }

        public void Clear()
        {
            Materials.Clear();
            OperatingUnits.Clear();
            Edges.Clear();
            GraphicsObjectList.Clear();
            UniqueID = 0;
        }


        public string ExportToPNS()
        {
            List<XMLPNSMaterial> rawmat = new List<XMLPNSMaterial>();
            List<XMLPNSMaterial> intermediatemat = new List<XMLPNSMaterial>();
            List<XMLPNSMaterial> productmat = new List<XMLPNSMaterial>();

            foreach (Material m in Materials)
            {
                XMLPNSMaterial tmat = new XMLPNSMaterial();
                tmat.Name = m.Name;
                if (m.Type == Globals.MaterialTypes.Raw)
                {
                    rawmat.Add(tmat);
                }
                else if (m.Type == Globals.MaterialTypes.Intermediate)
                {
                    intermediatemat.Add(tmat);
                }
                else if (m.Type == Globals.MaterialTypes.Product)
                {
                    productmat.Add(tmat);
                }
            }

            Dictionary<int, XMLPNSOperatingUnit> ounits = new Dictionary<int, XMLPNSOperatingUnit>();
            foreach (OperatingUnit o in OperatingUnits)
            {
                XMLPNSOperatingUnit top = new XMLPNSOperatingUnit();
                top.Name = o.Name;
                ounits[o.GetID()] = top;
            }

            foreach (Edge e in Edges)
            {
                XMLPNSOperatingUnitMaterial tmat = new XMLPNSOperatingUnitMaterial();
                tmat.Rate = e.RateProp;
                if (e.begin is Material && e.end is OperatingUnit)
                {
                    Material m = e.begin as Material;
                    tmat.Name = m.Name;
                    OperatingUnit o = e.end as OperatingUnit;
                    ounits[o.GetID()].Input.Add(tmat);
                }
                else if (e.begin is OperatingUnit && e.end is Material)
                {
                    Material m = e.end as Material;
                    tmat.Name = m.Name;
                    OperatingUnit o = e.begin as OperatingUnit;
                    ounits[o.GetID()].Output.Add(tmat);
                }
            }

            XMLPNS pns = new XMLPNS();
            pns.Problem.Materials.Raw = rawmat;
            pns.Problem.Materials.Intermediate = intermediatemat;
            pns.Problem.Materials.Product = productmat;

            foreach (XMLPNSOperatingUnit xop in ounits.Values)
            {
                pns.Problem.OperatingUnits.Add(xop);
            }

            StringWriter xmlwriter = new StringWriter();
            XmlSerializer xs = new XmlSerializer(typeof(XMLPNS));
            xs.Serialize(xmlwriter, pns);
            return xmlwriter.ToString();
        }

        public string ExportToSVG()
        {
            string svg = "";

            svg = "<!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">";
            svg += "<svg width=\"100%\" height=\"100%\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">";

            foreach (Edge e in Edges)
            {
                svg += e.CovertToSVG(0);
            }

            foreach (Material m in Materials)
            {
                svg += m.CovertToSVG(0);
            }

            foreach (OperatingUnit o in OperatingUnits)
            {
                svg += o.CovertToSVG(0);
            }

            svg += "</svg>";

            return svg;
        }

        public string ExportToXML()
        {
            XMLPGraph pgraph = new XMLPGraph();

            foreach (Material m in Materials)
            {
                XMLMaterial xmat = new XMLMaterial();
                xmat.ConvertFromMaterial(m);
                pgraph.Materials.Add(xmat);
            }

            foreach (OperatingUnit o in OperatingUnits)
            {
                XMLOperatingUnit xunit = new XMLOperatingUnit();
                xunit.ConvertFromOperatingUnit(o);
                pgraph.OperatingUnits.Add(xunit);
            }

            foreach (Edge e in Edges)
            {
                XMLEdge xedge = new XMLEdge();
                xedge.ConvertFromEdge(e);
                pgraph.Edges.Add(xedge);
            }

            pgraph.Settings.GridSize = Globals.GridSize;
            pgraph.Settings.DefaultFontSize = Globals.DefaultFontSize;

            StringWriter xmlwriter = new StringWriter();
            XmlSerializer xs = new XmlSerializer(typeof(XMLPGraph));
            xs.Serialize(xmlwriter, pgraph);
            return xmlwriter.ToString();
        }

        public bool ImportFromXML(string xml)
        {
            Clear();
            XmlSerializer xs = new XmlSerializer(typeof(XMLPGraph));
            XMLPGraph pgraph = (XMLPGraph) xs.Deserialize(new StringReader(xml));

            foreach (XMLMaterial xmat in pgraph.Materials)
            {
                Material m = new Material(this);
                xmat.FillData(m);
                AddMaterial(m);
            }

            foreach (XMLOperatingUnit xunit in pgraph.OperatingUnits)
            {
                OperatingUnit o = new OperatingUnit(this);
                xunit.FillData(o);
                AddOperatingUnit(o);
            }

            foreach (XMLEdge xedge in pgraph.Edges)
            {
                Edge e = new Edge(this);
                xedge.FillData(e);
                AddEdge(e);
            }

            Globals.GridSize = pgraph.Settings.GridSize;
            Globals.DefaultFontSize = pgraph.Settings.DefaultFontSize;

            return true;
        }

        List<Edge> GetConnectedEdges(Canvas.IGraphicsObject obj)
        {
            List<Edge> connected = new List<Edge>();
            foreach (Edge e in Edges)
            {
                if (e.begin == obj || e.end == obj)
                {
                    connected.Add(e);
                }
            }
            return connected;
        }

        public void AddEdge(Edge edge)
        {
            if (Edges.Contains(edge) == false)
            {
                Edges.Add(edge);
                edge.OnAddToGraph();
            }
        }

        public void AddMaterial(Material material)
        {
            if (Materials.Contains(material) == false)
            {
                if (material.GetID() > UniqueID)
                {
                    UniqueID = material.GetID();
                }
                Materials.Add(material);
                material.OnAddToGraph();
            }
        }

        public void AddOperatingUnit(OperatingUnit operatingunit)
        {
            if (OperatingUnits.Contains(operatingunit) == false)
            {
                if (operatingunit.GetID() > UniqueID)
                {
                    UniqueID = operatingunit.GetID();
                }
                OperatingUnits.Add(operatingunit);
                operatingunit.OnAddToGraph();
            }
        }

        public void RemoveEdge(Edge edge)
        {
            if (Edges.Contains(edge))
            {
                if (edge.GetID() > UniqueID)
                {
                    UniqueID = edge.GetID();
                }
                edge.OnRemoveFromGraph();
                Edges.Remove(edge);
            }
        }

        public void RemoveEdgeNode(EdgeNode node)
        {
            Edge edge = node.GetParentObject() as Edge;
            if (edge == null)
            {
                return;
            }
            edge.RemoveNode(node);
        }

        public void RemoveMaterial(Material material)
        {
            if (Materials.Contains(material))
            {
                material.OnRemoveFromGraph();
                Materials.Remove(material);
            }
        }

        public void RemoveOperatingUnit(OperatingUnit operatingunit)
        {
            if (OperatingUnits.Contains(operatingunit))
            {
                operatingunit.OnRemoveFromGraph(); 
                OperatingUnits.Remove(operatingunit);
            }
        }

        public List<Canvas.IGraphicsObject> GetObjectList()
        {
            return GraphicsObjectList;
        }


        public Canvas.IGraphicsObject GetObjectByID(int objectid)
        {
            foreach (Material m in Materials)
            {
                if (m.GetID() == objectid)
                {
                    return m;
                }
            }
            foreach (OperatingUnit o in OperatingUnits)
            {
                if (o.GetID() == objectid)
                {
                    return o;
                }
            }
            return null;
        }

        public string ValidateName(Canvas.IGraphicsObject obj, string name)
        {
            if (name == null)
            {
                name = "_";
            }

            string validchars = "0123456789_QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm";
            string validfirstchars = "_QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm";

            name = name.Replace(' ', '_');
            name = name.Replace('-', '_');

            string validname = "";

            int i=0;
            for (i = 0; i < name.Length; i++)
            {
                if (validchars.IndexOf(name[i])>=0)
                {
                    validname += name[i];
                }
            }
            if (validname.Length > 0)
            {
                if (validfirstchars.IndexOf(validname[0]) < 0)
                {
                    validname = "_" + validname;
                }
            }
            else
            {
                validname = "_";
            }

            bool ok = true;
            foreach (Material m in Materials)
            {
                if (m.Name == validname && m != obj)
                {
                    ok = false;
                }
            }

            foreach (OperatingUnit o in OperatingUnits)
            {
                if (o.Name == validname && o != obj)
                {
                    ok = false;
                }
            }

            if (ok == true)
            {
                return validname;
            }
            else
            {
                if (obj == null)
                {
                    return "";
                }
                else if (obj is Material)
                {
                    return ((Material)obj).Name;
                }
                else if (obj is OperatingUnit)
                {
                    return ((OperatingUnit)obj).Name;
                }
            }
            

            return "";
        }


        public string GenerateName(Canvas.IGraphicsObject obj)
        {
            string prefix = "node_";
            if (obj is Material)
            {
                prefix = "material_";
            }
            else if (obj is OperatingUnit)
            {
                prefix = "operatingunit_";
            }
            int i = 1;
            while (i < 1000)
            {
                string validname = ValidateName(null, prefix + i.ToString());
                if (validname != "")
                {
                    return validname;
                }
                i++;
            }
            return "unkonwn";
        }
    }
}
